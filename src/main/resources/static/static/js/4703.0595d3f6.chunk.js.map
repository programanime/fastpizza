{"version":3,"file":"static/js/4703.0595d3f6.chunk.js","mappings":"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","sources":["api.js","constants.js","views/order/Order.js"],"sourcesContent":["import axios from 'axios'\nimport { API_URL } from './constants'\n\nexport function getApiUrl() {\n  return API_URL\n}\n\nexport const axiosClient = axios.create({\n  baseURL: getApiUrl(),\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true,\n})\n\nexport const UserTypes = {\n  CLIENT: 'CLIENT',\n  ADMIN: 'ADMIN',\n}\n\nexport const SIMPLE_GET_OPTIONS = {\n  method: 'GET',\n  headers: new Headers({\n    Accept: 'application/json',\n  }),\n}\n\nexport const GET_OPTIONS = {\n  method: 'GET',\n  credentials: 'include',\n  headers: new Headers({\n    Accept: 'application/json',\n  }),\n}\n\nexport const POST_OPTIONS = {\n  method: 'POST',\n  credentials: 'include',\n  headers: new Headers({\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }),\n}\n\nexport const DELETE_OPTIONS = {\n  method: 'DELETE',\n  credentials: 'include',\n  headers: new Headers({\n    Accept: 'application/json',\n  }),\n}\n\nexport const PUT_OPTIONS = {\n  method: 'PUT',\n  credentials: 'include',\n  headers: new Headers({\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }),\n}\n\nexport const SIMPLE_POST_OPTIONS = {\n  method: 'POST',\n  headers: new Headers({\n    Accept: 'application/json',\n  }),\n}\n\nexport const AXIOS_OPTIONS = {\n  withCredentials: true,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n}\n","export const API_URL = '/api/'\n\nexport const PizzaSize = {\n  PERSONAL: 0.5,\n  SMALL: 0.7,\n  MEDIUM: 1,\n  BIG: 1.5,\n  FAMILIAR: 2,\n  PARTY: 3,\n}\n","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormTextarea,\n  CFormLabel,\n  CImage,\n  CSelect,\n  CFormSelect,\n  CRow,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { axiosClient } from '../../api'\nimport { PizzaSize } from '../../constants'\n\nconst Order = () => {\n  const pizza = useSelector((state) => state.pizza)\n  const [size, setSize] = useState('MEDIUM')\n  const [total, setTotal] = useState(pizza?.price || 0)\n  const [toppings, setToppings] = useState([])\n  const buy = () => {\n    Swal.fire('Done!')\n  }\n  const calculateTotal = (size, toppings) => {\n    const toppingValue = toppings.filter((t) => t.checked).reduce((total, t) => total + t.price, 0)\n    setTotal(pizza.price * PizzaSize[size] + toppingValue)\n    setSize(size)\n    setToppings(toppings)\n  }\n\n  const addTopping = (topping) => {\n    topping.checked = topping.checked === undefined ? true : !topping.checked\n    calculateTotal(size, [...toppings])\n  }\n\n  useEffect(() => {\n    const call = async () => {\n      const { data } = await axiosClient.get('toppings')\n      setToppings(data._embedded.toppings)\n    }\n    call()\n  }, [])\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>{pizza.name}</CCardHeader>\n        <CCardBody>\n          <CRow>\n            <CForm>\n              <div className=\"mb-3\">\n                <CFormLabel htmlFor=\"exampleFormControlInput1\">Pizza Size</CFormLabel>\n                <CFormSelect\n                  value={size}\n                  aria-label=\"Default select example\"\n                  onChange={(e) => calculateTotal(e.target.value, toppings)}\n                >\n                  {Object.keys(PizzaSize).map((size) => (\n                    <option key={size} value={size}>\n                      {size}\n                    </option>\n                  ))}\n                </CFormSelect>\n              </div>\n              <CRow>\n                <CCol sm={4}>\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Toppings</CFormLabel>\n                  {toppings.map((topping) => (\n                    <CFormCheck\n                      key={topping.name}\n                      label={topping.name + ' - $' + topping.price}\n                      name={topping.name}\n                      checked={topping.checked}\n                      onChange={() => addTopping(topping)}\n                    />\n                  ))}\n                </CCol>\n                <CCol sm={4}>\n                  <CImage fluid src={pizza.imageUrl} className=\"pizza\" />\n                </CCol>\n              </CRow>\n              <div className=\"mb-3\">\n                <br />\n                <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n                  Indications (Optional)\n                </CFormLabel>\n                <CFormTextarea id=\"exampleFormControlTextarea1\" rows=\"2\"></CFormTextarea>\n              </div>\n            </CForm>\n          </CRow>\n          <CCardFooter>\n            <CFormLabel>Total : ${total.toFixed(2)}</CFormLabel>\n            <CButton color=\"outline-success\" className=\"mx-4\" onClick={() => buy(pizza)}>\n              Buy\n            </CButton>\n          </CCardFooter>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Order\n"],"names":["axiosClient","axios","create","baseURL","API_URL","headers","Accept","withCredentials","Headers","PizzaSize","PERSONAL","SMALL","MEDIUM","BIG","FAMILIAR","PARTY","Order","pizza","useSelector","state","size","setSize","useState","total","setTotal","price","toppings","setToppings","calculateTotal","toppingValue","filter","t","checked","reduce","useEffect","async","data","get","_embedded","call","_jsx","_Fragment","children","_jsxs","CCard","className","CCardHeader","name","CCardBody","CRow","CForm","CFormLabel","htmlFor","CFormSelect","value","onChange","e","target","Object","keys","map","CCol","sm","topping","CFormCheck","label","undefined","addTopping","CImage","fluid","src","imageUrl","CFormTextarea","id","rows","CCardFooter","toFixed","CButton","color","onClick","Swal"],"sourceRoot":""}